import React, { useState, useEffect, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Stop, Vehicle } from "@/entities/all";
import { X, Clock, MapPin, Navigation, Users, AlertCircle } from "lucide-react";
import { format } from "date-fns";

export default function RouteDetails({ route, onClose }) {
  const [stops, setStops] = useState([]);
  const [vehicles, setVehicles] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  const loadRouteData = useCallback(async () => {
    setIsLoading(true);
    try {
      const [stopsData, vehiclesData] = await Promise.all([
        Stop.filter({ routes: [route.id] }),
        Vehicle.filter({ route_id: route.id })
      ]);
      setStops(stopsData);
      setVehicles(vehiclesData);
    } catch (error) {
      console.error("Error loading route data:", error);
    } finally {
      setIsLoading(false);
    }
  }, [route.id]);

  useEffect(() => {
    loadRouteData();
  }, [loadRouteData]);

  const activeVehicles = vehicles.filter(v => v.current_latitude && v.current_longitude);
  const delayedVehicles = activeVehicles.filter(v => v.is_delayed);

  return (
    <Card className="h-fit sticky top-6">
      <CardHeader className="pb-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className="w-6 h-6 rounded-lg"
              style={{ backgroundColor: route.route_color }}
            />
            <div>
              <CardTitle className="text-xl">{route.route_number}</CardTitle>
              <p className="text-sm text-gray-600">{route.route_name}</p>
            </div>
          </div>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="w-4 h-4" />
          </Button>
        </div>
      </CardHeader>

      <CardContent className="space-y-6">
        {/* Route Status */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Status</span>
            {route.is_active ? (
              <Badge className="bg-green-100 text-green-800">Active</Badge>
            ) : (
              <Badge variant="secondary">Inactive</Badge>
            )}
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Frequency</span>
            <span className="text-sm text-gray-600">Every {route.frequency_minutes} minutes</span>
          </div>

          {route.operating_hours && (
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Operating Hours</span>
              <span className="text-sm text-gray-600">
                {route.operating_hours.start_time} - {route.operating_hours.end_time}
              </span>
            </div>
          )}
        </div>

        {/* Live Status */}
        <div className="border-t pt-4">
          <h4 className="font-medium mb-3 flex items-center gap-2">
            <Navigation className="w-4 h-4" />
            Live Status
          </h4>
          
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Active Vehicles</span>
              <Badge variant="outline">{activeVehicles.length}</Badge>
            </div>
            
            {delayedVehicles.length > 0 && (
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600 flex items-center gap-1">
                  <AlertCircle className="w-3 h-3 text-amber-500" />
                  Delayed Vehicles
                </span>
                <Badge variant="destructive">{delayedVehicles.length}</Badge>
              </div>
            )}
          </div>
        </div>

        {/* Vehicle Details */}
        {!isLoading && activeVehicles.length > 0 && (
          <div className="border-t pt-4">
            <h4 className="font-medium mb-3">Vehicle Information</h4>
            <div className="space-y-3 max-h-40 overflow-y-auto">
              {activeVehicles.map((vehicle) => (
                <div key={vehicle.id} className="p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium">Vehicle {vehicle.vehicle_id}</span>
                    {vehicle.is_delayed && (
                      <Badge variant="destructive" className="text-xs">
                        +{vehicle.delay_minutes}min
                      </Badge>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2 text-xs text-gray-600">
                    <div className="flex items-center gap-1">
                      <Navigation className="w-3 h-3" />
                      {vehicle.speed_kmh} km/h
                    </div>
                    <div className="flex items-center gap-1">
                      <Users className="w-3 h-3" />
                      {vehicle.occupancy_level}
                    </div>
                  </div>
                  
                  {vehicle.estimated_arrival && (
                    <div className="mt-2 text-xs text-gray-600">
                      Next stop: {format(new Date(vehicle.estimated_arrival), 'HH:mm')}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Stops */}
        <div className="border-t pt-4">
          <h4 className="font-medium mb-3 flex items-center gap-2">
            <MapPin className="w-4 h-4" />
            Route Stops ({stops.length})
          </h4>
          
          {isLoading ? (
            <div className="space-y-2">
              {Array(3).fill(0).map((_, i) => (
                <div key={i} className="h-10 bg-gray-100 rounded animate-pulse" />
              ))}
            </div>
          ) : stops.length > 0 ? (
            <div className="space-y-2 max-h-32 overflow-y-auto">
              {stops.map((stop) => (
                <div key={stop.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="text-sm font-medium">{stop.stop_name}</span>
                  <span className="text-xs text-gray-500">{stop.stop_code}</span>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-gray-500">No stops data available</p>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
