import React from "react";
import { Marker, Popup } from "react-leaflet";
import L from "leaflet";
import { Badge } from "@/components/ui/badge";
import { Clock, Users, Navigation } from "lucide-react";

const createVehicleIcon = (color, isDelayed = false) => {
  const iconHtml = `
    <div style="
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: ${color};
      border: 3px solid white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    ">
      ${isDelayed ? '<div style="position: absolute; top: -2px; right: -2px; width: 6px; height: 6px; background-color: #ef4444; border-radius: 50%;"></div>' : ''}
    </div>
  `;
  
  return new L.DivIcon({
    html: iconHtml,
    className: 'custom-vehicle-marker',
    iconSize: [20, 20],
    iconAnchor: [10, 10],
  });
};

export default function VehicleMarkers({ vehicles, routes, selectedRoute }) {
  const getOccupancyColor = (level) => {
    switch (level) {
      case 'low': return '#10b981';
      case 'medium': return '#f59e0b';
      case 'high': return '#ef4444';
      case 'full': return '#dc2626';
      default: return '#6b7280';
    }
  };

  const getOccupancyText = (level) => {
    switch (level) {
      case 'low': return 'Plenty of space';
      case 'medium': return 'Some seats available';
      case 'high': return 'Standing room only';
      case 'full': return 'At capacity';
      default: return 'Unknown';
    }
  };

  const filteredVehicles = selectedRoute
    ? vehicles.filter(v => v.route_id === selectedRoute.id)
    : vehicles;

  return (
    <>
      {filteredVehicles.map((vehicle) => {
        const route = routes.find(r => r.id === vehicle.route_id);
        if (!route) return null;

        return (
          <Marker
            key={vehicle.id}
            position={[vehicle.current_latitude, vehicle.current_longitude]}
            icon={createVehicleIcon(route.route_color, vehicle.is_delayed)}
          >
            <Popup>
              <div className="p-2 min-w-[200px]">
                <div className="flex items-center gap-2 mb-2">
                  <div
                    className="w-4 h-4 rounded"
                    style={{ backgroundColor: route.route_color }}
                  />
                  <span className="font-semibold">{route.route_number}</span>
                  {vehicle.is_delayed && (
                    <Badge variant="destructive" className="text-xs">
                      Delayed
                    </Badge>
                  )}
                </div>
                
                <div className="space-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <Navigation className="w-3 h-3 text-gray-500" />
                    <span>{vehicle.speed_kmh} km/h</span>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <Users className="w-3 h-3 text-gray-500" />
                    <span style={{ color: getOccupancyColor(vehicle.occupancy_level) }}>
                      {getOccupancyText(vehicle.occupancy_level)}
                    </span>
                  </div>
                  
                  {vehicle.estimated_arrival && (
                    <div className="flex items-center gap-2">
                      <Clock className="w-3 h-3 text-gray-500" />
                      <span>
                        Next stop: {new Date(vehicle.estimated_arrival).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </div>
                  )}
                  
                  {vehicle.is_delayed && (
                    <p className="text-red-600 text-xs">
                      Running {vehicle.delay_minutes} minutes behind schedule
                    </p>
                  )}
                </div>
                
                <p className="text-xs text-gray-500 mt-2">
                  Vehicle ID: {vehicle.vehicle_id}
                </p>
              </div>
            </Popup>
          </Marker>
        );
      })}
    </>
  );
}
